[{"/Users/courtneynewcomer/Desktop/solo-react-redux-project/authenticate-me/frontend/src/index.js":"1","/Users/courtneynewcomer/Desktop/solo-react-redux-project/authenticate-me/frontend/src/App.js":"2","/Users/courtneynewcomer/Desktop/solo-react-redux-project/authenticate-me/frontend/src/store/index.js":"3","/Users/courtneynewcomer/Desktop/solo-react-redux-project/authenticate-me/frontend/src/store/csrf.js":"4","/Users/courtneynewcomer/Desktop/solo-react-redux-project/authenticate-me/frontend/src/store/session.js":"5","/Users/courtneynewcomer/Desktop/solo-react-redux-project/authenticate-me/frontend/src/components/LoginFormPage/index.js":"6","/Users/courtneynewcomer/Desktop/solo-react-redux-project/authenticate-me/frontend/src/components/SignupFormPage/index.js":"7"},{"size":785,"mtime":1611352986553,"results":"8","hashOfConfig":"9"},{"size":744,"mtime":1611360843237,"results":"10","hashOfConfig":"9"},{"size":774,"mtime":1611352919681,"results":"11","hashOfConfig":"9"},{"size":1534,"mtime":1611343715236,"results":"12","hashOfConfig":"9"},{"size":2368,"mtime":1611360036812,"results":"13","hashOfConfig":"9"},{"size":1750,"mtime":1611357735065,"results":"14","hashOfConfig":"9"},{"size":2227,"mtime":1611361016349,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"1i69yvz",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"18"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/courtneynewcomer/Desktop/solo-react-redux-project/authenticate-me/frontend/src/index.js",[],["32","33"],"/Users/courtneynewcomer/Desktop/solo-react-redux-project/authenticate-me/frontend/src/App.js",[],"/Users/courtneynewcomer/Desktop/solo-react-redux-project/authenticate-me/frontend/src/store/index.js",[],"/Users/courtneynewcomer/Desktop/solo-react-redux-project/authenticate-me/frontend/src/store/csrf.js",[],"/Users/courtneynewcomer/Desktop/solo-react-redux-project/authenticate-me/frontend/src/store/session.js",["34"],"import { fetch } from './csrf';\n\nconst SET_USER = 'session/setUser';\nconst REMOVE_USER = 'session/removeUser'\n\n\nconst setUser = (user) => {\n    return {\n        type: SET_USER,\n        payload: user\n    };\n};\n\nconst removeUser = () => {\n    return {\n        type: REMOVE_USER,\n    };\n};\n\n\n// Call API to login, then set session user from response\n// Thunk action for POST/api/session\nexport const login = (user) => async (dispatch) => {\n    const {credential, password } = user;\n    // Use custom fetch function\n    const response = await fetch('/api/session', {\n        method: 'POST',\n        // Route expects req.body to have key of credential-username/email & key of password\n        body: JSON.stringify({\n            credential,\n            password,\n        }),\n    });\n    // After response from AJAX call, dispatch action for setting session user to response's data\n    dispatch(setUser(response.data.user));\n    return response;\n};\n\nexport const restore = () => async (dispatch) => {\n    const response = await fetch('/api/session');\n    dispatch(setUser(response.data.user));\n    return response;\n};\n\nexport const signup = (user) => async (dispatch) => {\n  const { username, email, password } = user;\n  const response = await fetch(\"/api/users\", {\n    method: \"POST\",\n    body: JSON.stringify({\n      username,\n      email,\n      password,\n    }),\n  });\n  dispatch(setUser(response.data.user));\n  return response;\n};\n\n// By default, no session user in session slice of state\nconst initialState = {user: null};\n// Reducer will hold current session user's information \nconst sessionReducer = (state = initialState, action) => {\n    let newState;\n    switch (action.type) {\n        // POJO Action Creator - set session user in session slice of state to AC's input parameter\n        case SET_USER:\n            newState = Object.assign({}, state);\n            // if current session user, {user: {id, email, username, createdAt, updatedAt}}\n            newState.user = action.payload;\n            return newState;\n        // POJO Action Creator - will remove session user\n        case REMOVE_USER:\n            newState = Object.assign({}, state);\n            // if no session user, session slice of state {user:null}\n            newState.user = null;\n            return newState;\n        default:\n            return state;\n    }\n};\n\nexport default sessionReducer;","/Users/courtneynewcomer/Desktop/solo-react-redux-project/authenticate-me/frontend/src/components/LoginFormPage/index.js",[],"/Users/courtneynewcomer/Desktop/solo-react-redux-project/authenticate-me/frontend/src/components/SignupFormPage/index.js",[],{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","severity":1,"message":"40","line":14,"column":7,"nodeType":"41","messageId":"42","endLine":14,"endColumn":17},"no-native-reassign",["43"],"no-negated-in-lhs",["44"],"no-unused-vars","'removeUser' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]